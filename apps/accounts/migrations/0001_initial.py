# Generated by Django 2.2.13 on 2020-10-12 09:13

from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import uuid

from accounts.models import AccountType, PropField
from django.db import transaction

prop_field_data = [
    {'id': 1, 'name': 'PORT', 'type': PropField.TypeChoices.INT, 'required': 1},
    {'id': 2, 'name': 'SUBNET', 'type': PropField.TypeChoices.IP, 'required': 0},
    {'id': 3, 'name': 'GATEWAY', 'type': PropField.TypeChoices.IP, 'required': 0},
    {'id': 4, 'name': 'DNS', 'type': PropField.TypeChoices.IP, 'required': 0},
    {'id': 5, 'name': 'SSH_KEY', 'type': PropField.TypeChoices.STR, 'required': 1},
    {'id': 6, 'name': 'DB_NAME', 'type': PropField.TypeChoices.STR, 'required': 1},
    {'id': 7, 'name': 'SID', 'type': PropField.TypeChoices.STR, 'required': 0},
    {'id': 8, 'name': 'SERVICE_NAME', 'type': PropField.TypeChoices.STR, 'required': 0},
    {'id': 9, 'name': 'TNS_NAME', 'type': PropField.TypeChoices.STR, 'required': 0},
    {'id': 10, 'name': 'SECURE', 'type': PropField.TypeChoices.STR, 'choices': ('TLS', 'NLA'), 'required': 1},

]

account_type_data = [
    # APP
    {'id': '0b92526c3ee5464895c73f74f47f873d',
     'name': 'Microsoft RemoteApp',
     'category': AccountType.Category.APP,
     'base_type_id': None,
     'protocol': 'HTTPS',
     'prop_fields': []
     },
    {'name': 'vSphere Client',
     'category': AccountType.Category.APP,
     'base_type_id': '0b92526c3ee5464895c73f74f47f873d',
     'protocol': 'HTTPS',
     'prop_fields': []
     },
    {'name': 'Web Service',
     'category': AccountType.Category.APP,
     'base_type_id': '0b92526c3ee5464895c73f74f47f873d',
     'protocol': 'HTTPS',
     'prop_fields': []
     },
    {'name': 'MySQL Workbench',
     'category': AccountType.Category.APP,
     'base_type_id': '0b92526c3ee5464895c73f74f47f873d',
     'protocol': 'HTTPS',
     'prop_fields': []
     },

    # DATABASE
    {'id': '1a91de6836624856888c04c95435cf6f',
     'name': 'MySQL',
     'category': AccountType.Category.DATABASE,
     'base_type_id': None,
     'protocol': 'TCP/IP',
     'prop_fields': [1, 6]
     },
    {'name': 'PostgreSQL',
     'category': AccountType.Category.DATABASE,
     'base_type_id': None,
     'protocol': 'TCP/IP',
     'prop_fields': [1, 6]
     },
    {'name': 'Oracle',
     'category': AccountType.Category.DATABASE,
     'base_type_id': None,
     'protocol': 'TCP/IP',
     'prop_fields': [1, 7, 8, 9]
     },
    {'name': 'MariaDB',
     'category': AccountType.Category.DATABASE,
     'base_type_id': '1a91de6836624856888c04c95435cf6f',
     'protocol': 'TCP/IP',
     'prop_fields': []
     },

    # OS
    {'name': 'Unix SSH(password)',
     'category': AccountType.Category.OS,
     'base_type_id': None,
     'protocol': 'SSH',
     'prop_fields': [1]
     },
    {'name': 'Unix SSH(ssh-key)',
     'category': AccountType.Category.OS,
     'base_type_id': None,
     'protocol': 'SSH',
     'prop_fields': [1, 5]
     },
    {'id': 'ed81d10f895842ab8cd30e02279ead03',
     'name': 'Windows Server',
     'category': AccountType.Category.OS,
     'base_type_id': None,
     'protocol': 'RDP',
     'prop_fields': []
     },
    {'name': 'Windows Server(TLS)',
     'category': AccountType.Category.OS,
     'base_type_id': 'ed81d10f895842ab8cd30e02279ead03',
     'protocol': 'RDP',
     'prop_fields': [10]
     },
    {'name': 'Windows Server(NLA)',
     'category': AccountType.Category.OS,
     'base_type_id': 'ed81d10f895842ab8cd30e02279ead03',
     'protocol': 'RDP',
     'prop_fields': [10]
     },
    {'name': 'VNC Server',
     'category': AccountType.Category.OS,
     'base_type_id': None,
     'protocol': 'VNC',
     'prop_fields': [1]
     },

    # NETWORK DEVICE
    {'id': 'dea0bdf8081a45a7bb655d1fb482b120',
     'name': 'Network Device(ssh-key)',
     'category': AccountType.Category.NETWORK_DEVICE,
     'base_type_id': None,
     'protocol': 'SSH',
     'prop_fields': [1, 5]
     },
    {'name': 'Network Device(Telnet)',
     'category': AccountType.Category.NETWORK_DEVICE,
     'base_type_id': None,
     'protocol': 'TELNET',
     'prop_fields': [1]
     },
    {'name': 'Huawei Network Device(SSH)',
     'category': AccountType.Category.NETWORK_DEVICE,
     'base_type_id': 'dea0bdf8081a45a7bb655d1fb482b120',
     'protocol': 'SSH',
     'prop_fields': []
     },

    # CLOUD
    {'name': 'Kubernetes',
     'category': AccountType.Category.CLOUD,
     'base_type_id': None,
     'protocol': 'HTTPS',
     'prop_fields': []
     },

    # OTHER
    {'name': 'Generic',
     'category': AccountType.Category.Other,
     'base_type_id': None,
     'protocol': '',
     'prop_fields': []
     },
]


def initial_account_type(apps, schema_editor):
    prop_field_model = apps.get_model("accounts", "PropField")
    account_type_model = apps.get_model("accounts", "AccountType")
    db_alias = schema_editor.connection.alias

    with transaction.atomic():
        for data in prop_field_data:
            prop_field_model.objects.using(db_alias).create(**data)

        for data in account_type_data:
            data['created_by'] = 'init_db'
            prop_fields_ids = data.pop('prop_fields')
            obj = account_type_model.objects.using(db_alias).create(**data)
            if len(prop_fields_ids) > 0:
                obj.prop_fields.add(*prop_fields_ids)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('namespaces', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PropField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('list', 'List'), ('ip', 'IP')], default='string', max_length=32, verbose_name='Type')),
                ('default', jsonfield.fields.JSONField(default=dict)),
                ('choices', jsonfield.fields.JSONField(default=dict)),
                ('required', models.BooleanField(default=False, verbose_name='Required')),
            ],
            options={
                'verbose_name': 'Prop Field',
            },
        ),
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('updated_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Updated by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Name')),
                ('category', models.CharField(choices=[('os', 'Operation System'), ('network_device', 'Network Device'), ('app', 'Application'), ('cloud', 'Cloud'), ('other', 'Other')], default='os', max_length=64, verbose_name='Category')),
                ('protocol', models.CharField(max_length=32, verbose_name='Protocol')),
                ('base_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sub_types', to='accounts.AccountType', verbose_name='Base Type')),
                ('prop_fields', models.ManyToManyField(to='accounts.PropField', verbose_name='Properties Definition')),
            ],
            options={
                'verbose_name': 'Account Type',
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('updated_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Updated by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('org_id', models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('name', models.CharField(max_length=256, verbose_name='Name')),
                ('username', models.CharField(blank=True, max_length=256, null=True, verbose_name='Username')),
                ('address', models.CharField(max_length=1024, verbose_name='Address')),
                ('secret_type', models.CharField(choices=[('password', 'Password'), ('ssh-key', 'SSH Key'), ('token', 'Token'), ('cert', 'Cert')], max_length=32, verbose_name='Secret type')),
                ('secret', models.TextField(verbose_name='Secret')),
                ('extra_props', jsonfield.fields.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('comment', models.TextField(default='', verbose_name='Comment')),
                ('namespace', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='namespaces.Namespace', verbose_name='Namespace')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.AccountType', verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Account',
                'permissions': (('gain_secret', 'Can gain secret'), ('connect_account', 'Can connect account')),
            },
        ),
        migrations.RunPython(initial_account_type),
    ]
